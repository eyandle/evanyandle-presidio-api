from copy import deepcopy
from iptools.ipv4 import netmask2prefix, subnet2block
from io import StringIO
import json

template = {
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "__VPC_cidr__",
                "EnableDnsSupport": True,
                "EnableDnsHostnames": True,
                "Tags": [
                    {
                        "Key": "wasAutogenerated",
                        "Value": True
                    }
                ]
            }
        }
    }
}

subnet_template = {
    "Type": "AWS::EC2::Subnet",
    "Properties": {
        "VpcId": {"Ref": "VPC"},
        "CidrBlock": "__subnet__",
        "Tags": [

        ]
    }
}


def format_cidr(ip, subnet):
    print(ip)
    print(subnet)
    net = subnet2block(f'{ip}/{subnet}')[0]
    cidr = netmask2prefix(subnet)
    return f'{net}/{cidr}'


def create_cft_file(subnets: dict):
    output = deepcopy(template)
    output['Resources']['VPC']['Properties']['CidrBlock'] = '10.10.0.0/16'

    for i, s in enumerate(subnets):
        sn_template = deepcopy(subnet_template)
        sn_template['Properties']['CidrBlock'] = format_cidr(ip=s.get('ip'), subnet=s.get('mask'))
        sn_template['Properties']['Tags'].append({
            "Key": "Name",
            "Value": f"Subnet{i}"
        })

        output['Resources'][f'Subnet{i}'] = sn_template

    return make_file(output)


def make_file(data):
    file = StringIO(json.dumps(data))
    file.seek(0)
    return file